import random

from aiogram import F, Router, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from MIddleWares.UserMiddleWare import UserMiddleWare
from States import SellStolar, SellStock

from bot import bot
from config import title_shop, not_enough_points, shop_text, have_title
from db import Factory, Player, GetStockPrice, Leaderboard
from replys import rinok_markup, titles_shop_markup, lottery_markup, shop_reply, title_error_markup, market_markup, \
    back_shop_markup, lottery_back_markup

router = Router()
router.message.middleware(UserMiddleWare())


@router.callback_query(F.data == 'back_shop')
async def back_shop(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(shop_text,
                                 reply_markup=shop_reply)


@router.callback_query(F.data == 'shop')
async def shop_main(call: types.CallbackQuery):
    text = '\n'
    if call.message.chat.type != 'private':
        text += ("üü•–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ñ–∞–±—Ä–∏–∫–æ–π –æ–Ω–∏ –±—É–¥—É—Ç *–ø–æ–∫—É–ø–∞—Ç—å—Å—è –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∏ –≥—Ä—É–ø–ø—ã*, "
                 "–¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è *—Å–≤–æ–µ–π —Ñ–∞–±—Ä–∏–∫–∏* –ø–æ–∫—É–ø–∞–π—Ç–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!!üü•")
    await call.message.edit_text(shop_text + text, reply_markup=shop_reply, parse_mode='Markdown')


# region donate
@router.callback_query(F.data == '–¥–æ–Ω–∞—Ç')
async def test(call: CallbackQuery):
    return await call.message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
    # await message.answer("—Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ 100–∫ –æ—á–∫–æ–≤ –∑–∞ 85 —Ä—É–±")
    # await bot.send_invoice(message.from_user.id,
    #                        '100.000 –æ—á–∫–æ–≤',
    #                        '–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏? –ø—Ä–∏–æ–±—Ä–µ—Ç–∏ 100.000 –æ—á–∫–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.',
    #                        'something',
    #                        provider_token=provider_t,
    #                        currency='rub',
    #                        prices=prices)


# endregion
# region sell stolar
@router.callback_query(F.data == '—Ä—ã–Ω–æ–∫')
async def shop_stolar(call: CallbackQuery):
    await call.message.edit_text('üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫! üåü –Ø - —Ç–æ—Ä–≥–æ–≤–µ—Ü —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤.'
                                 '\nü™ô –Ø –º–æ–≥—É –ø—Ä–æ–¥–∞—Ç—å –≤–∞–º –ø–∞—Ä–æ—á–∫—É –∑–∞ 1 –º–ª—Ä–¥ —à—Ç—É–∫–∞.\n'
                                 'ü§© –ù–æ –µ—Å–ª–∏ –≤–∞–º —ç—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, '
                                 '–º–æ–∂–µ—Ç–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –Ω–∞ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω @tegtoryshop –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. üõçÔ∏èüî•',
                                 reply_markup=rinok_markup)


@router.callback_query(F.data == 'sellonrinok')
async def sell_stolar_on_tegtory(call: CallbackQuery):
    await call.message.answer('—á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ @tegtoryshop –ø–∏—à–∏: –ø—Ä–æ–¥–∞—Ç—å')


@router.message(F.text.lower().split()[0] == '–ø—Ä–æ–¥–∞—Ç—å')
async def sell_on_channel(message: Message, state: FSMContext):
    await message.answer('–ë—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ª–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ @tegtoryshop.\n'
                         '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –∏—Ö —Å—Ä–∞–∑—É —Å–ø–∏—à—É—Ç')
    await state.set_state(SellStolar.stolar_on_sell)


@router.message(StateFilter(SellStolar.stolar_on_sell))
async def set_stolar_for_sale(message: Message, state: FSMContext):
    amount = message.text
    player = Player(message.from_user.id)

    if player.stolar_coin < int(amount) or 0 > int(amount):
        return await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤')

    player.stolar_coin -= int(amount)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –≤–∞—à–∏ —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω—ã\n'
                         '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å –∑–∞: '
                         f'{int(amount) * 1000000000:,} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \"–∫\" –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ç—ã—Å—è—á–∏')
    await state.update_data(stolar_on_sell=amount)
    await state.set_state(SellStolar.money_buy)


@router.message(StateFilter(SellStolar.money_buy))
async def set_buy_price(message: Message, state: FSMContext):
    cost = message.text
    cost = cost.replace("–∫", '000')
    cost = cost.replace(',', '')
    if int(cost) < 0:
        return await message.answer('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞')
    await state.update_data(money_buy=cost)
    await state.set_state(SellStolar.confirm)
    user = await state.get_data()
    cost = user['money_buy']
    amount = user['stolar_on_sell']
    await message.answer('–Ω–∞–ø–∏—à–∏—Ç–µ \"–î–∞\" –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ\n'
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤: {amount}\n'
                         f'–¶–µ–Ω–∞: {int(cost):,}')


@router.message(StateFilter(SellStolar.confirm), F.text.lower() == '–¥–∞')
async def create_message_sell(message: Message, state: FSMContext):
    user = await state.get_data()
    cost = user['money_buy']
    amount = user['stolar_on_sell']
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å',
                              callback_data=
                              f'buy_stolar:{cost}:{amount}:{message.from_user.id}')]])
    await message.answer('–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å @tegtoryshop')
    await bot.send_message('@tegtoryshop', f'–ø—Ä–æ–¥–∞–µ—Ç—Å—è {amount} —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤ –∑–∞ {int(cost):,} –æ—á–∫–æ–≤',
                           reply_markup=markup)
    await state.clear()


# endregion
# region titles
@router.callback_query(F.data == '—Ç–∏—Ç—É–ª—ã')
async def buy_title_main(call: CallbackQuery):
    await call.message.edit_text(title_shop, reply_markup=titles_shop_markup)


@router.callback_query(F.data.split(':')[0] == 'buy_title')
async def buy_title_call(call: CallbackQuery):
    player = Player(call.from_user.id)
    factory = Factory(call.from_user.id)
    bought = ''
    title = call.data.split(":")[1]

    if title == '–ë–æ–≥–∞—á':
        if player.money < 1000000:
            return await call.message.edit_text(not_enough_points, reply_markup=title_error_markup)

        if '–ë–æ–≥–∞—á' in player.titles.split():
            return await call.message.edit_text(have_title, reply_markup=title_error_markup)

        player.money -= 1000000

        player.titles += " –ë–æ–≥–∞—á"

        bought = '–ë–æ–≥–∞—á'

    elif title == '–ú–∞–≥–Ω–∞—Ç':
        if player.money < 100000000:
            return await call.message.edit_text(not_enough_points, reply_markup=title_error_markup)

        if "–ú–∞–≥–Ω–∞—Ç" in player.titles.split():
            return await call.message.edit_text(have_title, reply_markup=title_error_markup)

        if factory.level < 100:
            return await call.message.edit_text('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', reply_markup=title_error_markup)

        player.money -= 100000000
        player.titles += ' –ú–∞–≥–Ω–∞—Ç'
        bought = '–ú–∞–≥–Ω–∞—Ç'

    elif title == '–û–¥–∏–Ω_–∏–∑_–ª—É—á—à–∏—Ö' and Leaderboard().Money().me(Player(call.from_user.id).iternal_id) <= 3:
        if '–û–¥–∏–Ω_–∏–∑_–ª—É—á—à–∏—Ö' in player.titles.split():
            return call.message.edit_text('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ç–∏—Ç—É–ª', reply_markup=title_error_markup)

        player.titles += ' –û–¥–∏–Ω_–∏–∑_–ª—É—á—à–∏—Ö'

        bought = '–û–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö'
    await call.message.edit_text(f'–ö—É–ø–ª–µ–Ω —Ç–∏—Ç—É–ª *{bought}* ', reply_markup=title_error_markup)


# endregion
# region buy_stolar_coin
@router.callback_query(F.data.split(':')[0] == 'buy_stolar')
async def buy_on_channel(call: CallbackQuery):
    data = call.data.split(':')
    player = Player(call.from_user.id)
    if player.money < int(data[1]):
        return
    player.money -= int(data[1])
    player.stolar_coin += int(data[2])
    Player(data[3]).money += int(data[1])
    await bot.delete_message("@tegtoryshop", call.message.message_id)
    await bot.send_message(data[3], f'–£ –≤–∞—Å –∫—É–ø–∏–ª–∏ —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω—ã {data[2]} –Ω–∞ —Å—É–º–º—É {int(data[1]):,}')


@router.callback_query(F.data == 'buy_stolar_coin_10x')
async def buy_stolar_coin_10(call: CallbackQuery):
    player = Player(call.from_user.id)
    if player.money >= 10000000000:
        player.money -= 10000000000
        player.stolar_coin += 10
        await call.message.answer('–∫—É–ø–ª–µ–Ω–æ 10 —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤')
    else:
        await call.message.answer(not_enough_points)


@router.callback_query(F.data == 'buy_stolar_coin_100x')
async def buy_stolar_coin_100(call: CallbackQuery):
    player = Player(call.from_user.id)
    if player.money >= 100000000000:
        player.money -= 100000000000
        player.stolar_coin += 100
        await call.message.answer('–∫—É–ø–ª–µ–Ω–æ 100 —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤')
    else:
        await call.message.answer(not_enough_points)


@router.callback_query(F.data == 'buy_stolar_coin')
async def buy_stolar_coin(call: CallbackQuery):
    player = Player(call.from_user.id)

    if player.money > 1000000000:
        player.money -= 1000000000
        player.stolar_coin += 1
        await call.message.answer('–∫—É–ø–ª–µ–Ω —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω')
    else:
        await call.message.answer(not_enough_points)


# endregion
# region lottery
@router.callback_query(F.data.lower() == '–ª–æ—Ç–µ—Ä–µ—è')
async def lottery_main(call: CallbackQuery):
    await call.message.edit_text('üéü*–õ–æ—Ç–µ—Ä–µ—è*üéü\n\n'
                                 '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–∏.\n\n'
                                 '*–ò–Ω—Ñ–æ:*\n'
                                 '*–ë—Ä–æ–Ω–∑–æ–≤—ã–π –±–∏–ª–µ—Ç:\n*–¶–µ–Ω–∞ - 5,000 –æ—á–∫–æ–≤, –≤—ã–π–≥—Ä—ã—à - 50,000 –æ—á–∫–æ–≤\n\n'
                                 '*–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –±–∏–ª–µ—Ç:\n*–¶–µ–Ω–∞ - 100,000 –æ—á–∫–æ–≤, –≤—ã–π–≥—Ä—ã—à - 1,000,000 –æ—á–∫–æ–≤\n\n'
                                 '*–ó–æ–ª–æ—Ç–æ–π –±–∏–ª–µ—Ç:\n*–¶–µ–Ω–∞ - 10,000,000 –æ—á–∫–æ–≤, –≤—ã–π–≥—Ä—ã—à - 1,000,000,000 –æ—á–∫–æ–≤\n\n'
                                 '*–°—Ç–æ–ª–∞—Ä –±–∏–ª–µ—Ç:\n*–¶–µ–Ω–∞ - 10 —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤, –≤—ã–π–≥—Ä—ã—à - 100 —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤\n\n'
                                 f'üéü–ù–æ–º–µ—Ä–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:{Player(call.from_user.id).tickets}\n\n',
                                 reply_markup=lottery_markup)


@router.callback_query(F.data == 'bronze_ticket')
async def buy_bronze_ticket(call: CallbackQuery):
    player = Player(call.from_user.id)
    new_ticket = random.randint(1000, 1500)
    while new_ticket in player.tickets.split():
        new_ticket = random.randint(1000, 1500)
    if player.money >= 5000:
        player.money -= 5000
        player.tickets += f' {new_ticket}'
        await call.message.edit_text(f'–ö—É–ø–ª–µ–Ω –±—Ä–æ–Ω–∑–æ–≤—ã–π –±–∏–ª–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º {new_ticket}', reply_markup=lottery_back_markup)
    else:
        await call.message.edit_text("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—á–∫–æ–≤", reply_markup=lottery_back_markup)


@router.callback_query(F.data == 'serebro_ticket')
async def buy_serebro_ticket(call: CallbackQuery):
    player = Player(call.from_user.id)

    new_ticket = random.randint(10000, 15000)
    while new_ticket in player.tickets.split():
        new_ticket = random.randint(10000, 15000)
    if player.money >= 100000:
        player.money -= 100000
        player.tickets += f' {new_ticket}'
        await call.message.edit_text(f'–ö—É–ø–ª–µ–Ω —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π –±–∏–ª–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º {new_ticket}',
                                     reply_markup=lottery_back_markup)
    else:
        await call.message.edit_text("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—á–∫–æ–≤", reply_markup=lottery_back_markup)


@router.callback_query(F.data == 'gold_ticket')
async def buy_gold_ticket(call: CallbackQuery):
    player = Player(call.from_user.id)
    new_ticket = random.randint(100000, 150000)
    while new_ticket in player.tickets.split():
        new_ticket = random.randint(100000, 150000)
    if player.money >= 10000000:
        player.money -= 10000000
        player.tickets += f' {new_ticket}'
        await call.message.edit_text(f'–ö—É–ø–ª–µ–Ω –∑–æ–ª–æ—Ç–æ–π –±–∏–ª–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º {new_ticket}', reply_markup=lottery_back_markup)
    else:
        await call.message.edit_text("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—á–∫–æ–≤", reply_markup=lottery_back_markup)


@router.callback_query(F.data == 'stolar_ticket')
async def buy_stolar_ticket(call: CallbackQuery):
    player = Player(call.from_user.id)
    new_ticket = random.randint(1000000, 1500000)
    while new_ticket in player.tickets.split():
        new_ticket = random.randint(1000000, 1500000)
    if player.stolar_coin >= 10:
        player.stolar_coin -= 10
        player.tickets += f' {new_ticket}'
        await call.message.edit_text(f'–ö—É–ø–ª–µ–Ω —Å—Ç–æ–ª–∞—Ä –±–∏–ª–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º {new_ticket}', reply_markup=lottery_back_markup)
    else:
        await call.message.edit_text("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ç–æ–ª–∞—Ä –∫–æ–∏–Ω–æ–≤", reply_markup=lottery_back_markup)


# endregion
# region market
@router.callback_query(F.data == '–º–∞—Ä–∫–µ—Ç')
async def market(call: CallbackQuery):
    await call.message.edit_text('–ü—Ä–æ–¥–∞–π—Ç–µ —Å–≤–æ–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n'
                                 f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {GetStockPrice().get} –∑–∞ —à—Ç—É–∫—É',
                                 reply_markup=market_markup)


@router.callback_query(F.data == 'sell_on_market')
async def sell_on_market(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        f'–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä–∞. –£ –≤–∞—Å –µ—Å—Ç—å {Factory(call.from_user.id).stock}',
        reply_markup=back_shop_markup)
    await state.set_state(SellStock().stock)


@router.message(SellStock().stock)
async def amount_to_sell(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
    except:
        return await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    price = GetStockPrice().get
    factory = Factory(message.from_user.id)
    if amount <= 0 or amount > factory.stock:
        return await message.answer('–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–≤–∞—Ä–∞')

    factory.stock -= amount
    Player(message.from_user.id).money += amount * price
    await message.answer('–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ')
    await state.clear()
# endregion
