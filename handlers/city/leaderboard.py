from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest

from Filters import LeaderboardFilter
from middlewares.UserMiddleWare import UserMiddleWare
from bot import api
from db import Leaderboard
from replys import leaderboard_inline, old_seasons_markup

router = Router()
router.message.middleware(UserMiddleWare())
pre_alpha_season_leader = (
    "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤: \n"
    "1. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: nagan. –ë–∞–ª–∞–Ω—Å 40250 –æ—á–∫–æ–≤. \n\n"
    "2. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: ffffff. –ë–∞–ª–∞–Ω—Å 14550 –æ—á–∫–æ–≤. \n\n"
    "3. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: –°–º–µ–ª–∞—è?. –ë–∞–ª–∞–Ω—Å 9500 –æ—á–∫–æ–≤. \n\n"
    "4. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: MAXXXlox. –ë–∞–ª–∞–Ω—Å 4799 –æ—á–∫–æ–≤. \n\n"
    "5. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: –°–∞–º–∏—Ä. –ë–∞–ª–∞–Ω—Å 1750 –æ—á–∫–æ–≤. \n\n"
    "6. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: @#$—Ç–∞. –ë–∞–ª–∞–Ω—Å 800 –æ—á–∫–æ–≤. \n\n"
    "7. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: –∫$–Ω$–º–µ–Ω. –ë–∞–ª–∞–Ω—Å 600 –æ—á–∫–æ–≤. \n\n"
    "8. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: alfheisj. –ë–∞–ª–∞–Ω—Å 600 –æ—á–∫–æ–≤.\n\n "
    "9. –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: —à–µ–ø—Ç–∞–ª–æ. –ë–∞–ª–∞–Ω—Å 200 –æ—á–∫–æ–≤."
)
alpha_season = """
üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ üèÜ
ü•á1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: —è –≤–∞—à –±–æ–≥üëπ
–ë–∞–ª–∞–Ω—Å: 990,289,427,000,000 –æ—á–∫–æ–≤. 

ü•à2. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: –∫–∏—à–ª—ç–∫
–ë–∞–ª–∞–Ω—Å: 194,906,656,980,779 –æ—á–∫–æ–≤. 

ü•â3. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: –°—Ç–∞—Ç—å—è–£–ö–†–§
–ë–∞–ª–∞–Ω—Å: 5,009,446,491,134 –æ—á–∫–æ–≤. 

4. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: pidorasi
–ë–∞–ª–∞–Ω—Å: 675,000,000.5 –æ—á–∫–æ–≤. 

5. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏: —Å—é–¥–∞
–ë–∞–ª–∞–Ω—Å: 7,583 –æ—á–∫–æ–≤. 
"""


@router.callback_query(F.data == "leaderboard")
async def leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            f"{Leaderboard().Money()}"
            f"\n\n–≤–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ {Leaderboard().Money().me(api.player(call.from_user.id).id)}",
            reply_markup=leaderboard_inline,
        )
    except TelegramBadRequest:
        pass


@router.message(LeaderboardFilter())
async def leaderboard_def(message: types.Message):
    try:
        await message.answer(
            f"{Leaderboard().Money()}"
            f"\n\n–≤–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ {Leaderboard().Money().me(api.player(message.from_user.id).id)}",
            reply_markup=leaderboard_inline,
        )
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == "rating_leaderboard")
async def call_rating_leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            f"{Leaderboard().Rating()}"
            f"\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ {Leaderboard().Rating().me(api.player(call.from_user.id).id)}",
            reply_markup=leaderboard_inline,
        )
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == "stolar_leaderboard")
async def call_stolar_leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            str(Leaderboard().Stolar())
            + f"\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ {Leaderboard().Stolar().me(api.player(call.from_user.id).id)}",
            reply_markup=leaderboard_inline,
        )
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == "factory_leaderboard")
async def call_level_leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            str(Leaderboard().Level())
            + f"\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ {Leaderboard().Level().me(api.player(call.from_user.id).id)}",
            reply_markup=leaderboard_inline,
        )
    except TelegramBadRequest as e:
        print(e)


@router.callback_query(F.data == "eco_leaderboard")
async def call_clan_leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            str(Leaderboard().Eco())
            + f"\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ {Leaderboard().Eco().me(api.player(call.from_user.id).id)}",
            reply_markup=leaderboard_inline,
        )
    except TelegramBadRequest as e:
        print(e)


@router.callback_query(F.data == "clan_leaderboard")
async def call_clan_leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            str(Leaderboard().Clans()), reply_markup=leaderboard_inline
        )
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == "pre_apha_season")
async def pre_alpha_leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            pre_alpha_season_leader, reply_markup=leaderboard_inline
        )
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == "alpha_season")
async def pre_alpha_leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            alpha_season, reply_markup=leaderboard_inline
        )
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == "old_leaderboard")
async def call_clan_leaderboard(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–∑–æ–Ω–æ–≤\n"
            "*–ó–∞–º–µ—Ç–∫–∞* –¥–∏–∑–∞–π–Ω –ø—Ä–æ—à–ª—ã—Ö –≤–µ—Ä—Å–∏–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
            "*–∑–∞–º–µ—Ç–∫–∞ 2* –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ–Ω–∞ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.",
            reply_markup=old_seasons_markup,
        )
    except TelegramBadRequest:
        pass
