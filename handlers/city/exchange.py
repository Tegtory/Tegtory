from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from states import SellStolar
from bot import bot, api
from config import not_enough_points
from replys import rinok_markup, back_exchange

router = Router()


@router.callback_query(F.data == "—Ä—ã–Ω–æ–∫")
async def shop_stolar(call: CallbackQuery):
    await call.message.edit_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫! üåü –Ø - —Ç–æ—Ä–≥–æ–≤–µ—Ü SC."
        "\nü™ô –Ø –º–æ–≥—É –ø—Ä–æ–¥–∞—Ç—å –≤–∞–º –ø–∞—Ä–æ—á–∫—É –∑–∞ 1 –º–ª—Ä–¥ —à—Ç—É–∫–∞.ü§© \n"
        "–ù–æ –µ—Å–ª–∏ –≤–∞–º —ç—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, "
        "–º–æ–∂–µ—Ç–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –Ω–∞ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω @tegtoryshop –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. üõçÔ∏èüî•",
        reply_markup=rinok_markup,
    )


@router.callback_query(F.data == "sellonrinok")
async def sell_stolar_on_tegtory(call: CallbackQuery):
    await call.message.edit_text(
        "—á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ @tegtoryshop –ø–∏—à–∏: –ø—Ä–æ–¥–∞—Ç—å",
        reply_markup=back_exchange,
    )


@router.message(F.text.lower().split()[0] == "–ø—Ä–æ–¥–∞—Ç—å")
async def sell_on_channel(message: Message, state: FSMContext):
    await message.answer(
        "–ë—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ª–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ @tegtoryshop.\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SC –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –∏—Ö —Å—Ä–∞–∑—É —Å–ø–∏—à—É—Ç"
    )
    await state.set_state(SellStolar.stolar_on_sell)


@router.message(StateFilter(SellStolar.stolar_on_sell))
async def set_stolar_for_sale(message: Message, state: FSMContext):
    amount = message.text
    player = api.player(message.from_user.id)

    if player.stolar < int(amount) or 0 > int(amount):
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SC")

    player.stolar -= int(amount)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –≤–∞—à–∏ SC\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å –∑–∞: "
        f'{int(amount) * 1000000000:,} \n—Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–∫" –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ç—ã—Å—è—á–∏'
    )
    await state.update_data(stolar_on_sell=amount)
    await state.set_state(SellStolar.money_buy)


@router.message(StateFilter(SellStolar.money_buy))
async def set_buy_price(message: Message, state: FSMContext):
    cost = message.text
    cost = cost.replace("–∫", "000").replace(",", "")
    if int(cost) < 0:
        return await message.answer("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    await state.update_data(money_buy=cost)
    await state.set_state(SellStolar.confirm)
    user = await state.get_data()
    cost = user["money_buy"]
    amount = user["stolar_on_sell"]
    await message.answer(
        '–Ω–∞–ø–∏—à–∏—Ç–µ "–î–∞" –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ\n'
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
        f"–¶–µ–Ω–∞: {int(cost):,}"
    )


@router.message(StateFilter(SellStolar.confirm), F.text.lower() == "–¥–∞")
async def create_message_sell(message: Message, state: FSMContext):
    user = await state.get_data()
    cost = user["money_buy"]
    amount = user["stolar_on_sell"]
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ö—É–ø–∏—Ç—å",
                    callback_data=f"buy_stolar:{cost}:{amount}:{message.from_user.id}",
                )
            ]
        ]
    )
    await message.answer("–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å @tegtoryshop")
    await bot.send_message(
        "@tegtoryshop",
        f"–ø—Ä–æ–¥–∞–µ—Ç—Å—è {amount} SC –∑–∞ {int(cost):,} –æ—á–∫–æ–≤",
        reply_markup=markup,
    )
    await state.clear()


@router.callback_query(F.data.split(":")[0] == "buy_stolar")
async def buy_on_channel(call: CallbackQuery):
    data = call.data.split(":")
    player = api.player(call.from_user.id)
    money, stolar = player.get("money,stolar")
    if money < int(data[1]):
        return
    money -= int(data[1])
    stolar += int(data[2])
    player.set(
        {
            "telegram_id": call.from_user.id,
            "money": money,
            "stolar": stolar,
        }
    )
    api.player(data[3]).money += int(data[1])
    await bot.delete_message("@tegtoryshop", call.message.message_id)
    await bot.send_message(
        data[3],
        f"–£ –≤–∞—Å –∫—É–ø–∏–ª–∏ SC {data[2]} –Ω–∞ —Å—É–º–º—É {int(data[1]):,}",
    )
    await call.answer("–£—Å–ø–µ—à–Ω–æ", show_alert=True)


@router.callback_query(F.data.split(":")[0] == "buy_stolar_coin")
async def buy_stolar_coin(call: CallbackQuery):
    player = api.player(call.from_user.id)
    amount = int(call.data.split(":")[1])
    money, stolar = player.get("money,stolar")
    if money >= 1000000000 * amount:
        money -= 1000000000 * amount
        stolar += 1 * amount
        player.set(
            {
                "telegram_id": call.from_user.id,
                "money": money,
                "stolar": stolar,
            }
        )
        await call.message.edit_text(
            f"–∫—É–ø–ª–µ–Ω–æ {amount} SC –∑–∞ {1000000000 * amount}",
            reply_markup=back_exchange,
        )
    else:
        await call.answer(not_enough_points, show_alert=True)
